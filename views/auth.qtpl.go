// Code generated by qtc from "auth.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line views/auth.qtpl:1
package views

//line views/auth.qtpl:1
import "net/http"

//line views/auth.qtpl:2
import "github.com/bouncepaw/mycorrhiza/cfg"

//line views/auth.qtpl:4
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line views/auth.qtpl:4
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line views/auth.qtpl:4
func StreamRegisterHTML(qw422016 *qt422016.Writer, rq *http.Request) {
//line views/auth.qtpl:4
	qw422016.N().S(`
<div class="layout">
<main class="main-width">
	<section>
	`)
//line views/auth.qtpl:8
	if cfg.AllowRegistration {
//line views/auth.qtpl:8
		qw422016.N().S(`
		<form class="modal" method="post" action="/register?`)
//line views/auth.qtpl:9
		qw422016.E().S(rq.URL.RawQuery)
//line views/auth.qtpl:9
		qw422016.N().S(`" id="register-form" enctype="multipart/form-data" autocomplete="off">
			<fieldset class="modal__fieldset">
				<legend class="modal__title">Register on `)
//line views/auth.qtpl:11
		qw422016.E().S(cfg.WikiName)
//line views/auth.qtpl:11
		qw422016.N().S(`</legend>

				<label for="register-form__username">Username</label>
				<br>
				<input type="text" required autofocus id="login-form__username" name="username">
				<br>
				<label for="login-form__password">Password</label>
				<br>
				<input type="password" required name="password">
				<p>The server stores your password in an encrypted form; even administrators cannot read it.</p>
				<p>By submitting this form you give this wiki a permission to store cookies in your browser. It lets the engine associate your edits with you. You will stay logged in until you log out.</p>
				<input class="btn" type="submit" value="Register">
				<a class="btn btn_weak" href="/`)
//line views/auth.qtpl:23
		qw422016.E().S(rq.URL.RawQuery)
//line views/auth.qtpl:23
		qw422016.N().S(`">Cancel</a>
			</fieldset>
		</form>
		`)
//line views/auth.qtpl:26
		streamtelegramWidgetHTML(qw422016)
//line views/auth.qtpl:26
		qw422016.N().S(`
	`)
//line views/auth.qtpl:27
	} else if cfg.UseAuth {
//line views/auth.qtpl:27
		qw422016.N().S(`
		<p>Registrations are currently closed. Administrators can make an account for you by hand; contact them.</p>
		<p><a href="/`)
//line views/auth.qtpl:29
		qw422016.E().S(rq.URL.RawQuery)
//line views/auth.qtpl:29
		qw422016.N().S(`">← Go back</a></p>
	`)
//line views/auth.qtpl:30
	} else {
//line views/auth.qtpl:30
		qw422016.N().S(`
		<p>Authentication is disabled. You can make edits anonymously.</p>
		<p><a href="/`)
//line views/auth.qtpl:32
		qw422016.E().S(rq.URL.RawQuery)
//line views/auth.qtpl:32
		qw422016.N().S(`">← Go back</a></p>
	`)
//line views/auth.qtpl:33
	}
//line views/auth.qtpl:33
	qw422016.N().S(`
	</section>
</main>
</div>
`)
//line views/auth.qtpl:37
}

//line views/auth.qtpl:37
func WriteRegisterHTML(qq422016 qtio422016.Writer, rq *http.Request) {
//line views/auth.qtpl:37
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/auth.qtpl:37
	StreamRegisterHTML(qw422016, rq)
//line views/auth.qtpl:37
	qt422016.ReleaseWriter(qw422016)
//line views/auth.qtpl:37
}

//line views/auth.qtpl:37
func RegisterHTML(rq *http.Request) string {
//line views/auth.qtpl:37
	qb422016 := qt422016.AcquireByteBuffer()
//line views/auth.qtpl:37
	WriteRegisterHTML(qb422016, rq)
//line views/auth.qtpl:37
	qs422016 := string(qb422016.B)
//line views/auth.qtpl:37
	qt422016.ReleaseByteBuffer(qb422016)
//line views/auth.qtpl:37
	return qs422016
//line views/auth.qtpl:37
}

//line views/auth.qtpl:39
func StreamLoginHTML(qw422016 *qt422016.Writer) {
//line views/auth.qtpl:39
	qw422016.N().S(`
<div class="layout">
<main class="main-width">
	<section>
	`)
//line views/auth.qtpl:43
	if cfg.UseAuth {
//line views/auth.qtpl:43
		qw422016.N().S(`
		<form class="modal" method="post" action="/login-data" id="login-form" enctype="multipart/form-data" autocomplete="on">
			<fieldset class="modal__fieldset">
				<legend class="modal__title">Log in to `)
//line views/auth.qtpl:46
		qw422016.E().S(cfg.WikiName)
//line views/auth.qtpl:46
		qw422016.N().S(`</legend>
				<label for="login-form__username">Username</label>
				<br>
				<input type="text" required autofocus id="login-form__username" name="username" autocomplete="username">
				<br>
				<label for="login-form__password">Password</label>
				<br>
				<input type="password" required name="password" autocomplete="current-password">
				<p>By submitting this form you give this wiki a permission to store cookies in your browser. It lets the engine associate your edits with you. You will stay logged in until you log out.</p>
				<input class="btn" type="submit" value="Log in">
				<a class="btn btn_weak" href="/">Cancel</a>
			</fieldset>
		</form>
		`)
//line views/auth.qtpl:59
		streamtelegramWidgetHTML(qw422016)
//line views/auth.qtpl:59
		qw422016.N().S(`
	`)
//line views/auth.qtpl:60
	} else {
//line views/auth.qtpl:60
		qw422016.N().S(`
		<p>Authentication is disabled. You can make edits anonymously.</p>
		<p><a class="btn btn_weak" href="/">← Go home</a></p>
	`)
//line views/auth.qtpl:63
	}
//line views/auth.qtpl:63
	qw422016.N().S(`
	</section>
</main>
</div>
`)
//line views/auth.qtpl:67
}

//line views/auth.qtpl:67
func WriteLoginHTML(qq422016 qtio422016.Writer) {
//line views/auth.qtpl:67
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/auth.qtpl:67
	StreamLoginHTML(qw422016)
//line views/auth.qtpl:67
	qt422016.ReleaseWriter(qw422016)
//line views/auth.qtpl:67
}

//line views/auth.qtpl:67
func LoginHTML() string {
//line views/auth.qtpl:67
	qb422016 := qt422016.AcquireByteBuffer()
//line views/auth.qtpl:67
	WriteLoginHTML(qb422016)
//line views/auth.qtpl:67
	qs422016 := string(qb422016.B)
//line views/auth.qtpl:67
	qt422016.ReleaseByteBuffer(qb422016)
//line views/auth.qtpl:67
	return qs422016
//line views/auth.qtpl:67
}

// Telegram auth widget was requested by Yogurt. As you can see, we don't offer user administrators control over it. Of course we don't.

//line views/auth.qtpl:70
func streamtelegramWidgetHTML(qw422016 *qt422016.Writer) {
//line views/auth.qtpl:70
	qw422016.N().S(`
`)
//line views/auth.qtpl:71
	if cfg.TelegramEnabled {
//line views/auth.qtpl:71
		qw422016.N().S(`
<p class="telegram-notice">You can log in using Telegram. It only works if you have set your @username in Telegram and this username is free on this wiki.</p>
<script async src="https://telegram.org/js/telegram-widget.js?15" data-telegram-login="`)
//line views/auth.qtpl:73
		qw422016.E().S(cfg.TelegramBotName)
//line views/auth.qtpl:73
		qw422016.N().S(`" data-size="medium" data-userpic="false" data-auth-url="`)
//line views/auth.qtpl:73
		qw422016.E().S(cfg.URL)
//line views/auth.qtpl:73
		qw422016.N().S(`/telegram-login"></script>
`)
//line views/auth.qtpl:74
	}
//line views/auth.qtpl:74
	qw422016.N().S(`
`)
//line views/auth.qtpl:75
}

//line views/auth.qtpl:75
func writetelegramWidgetHTML(qq422016 qtio422016.Writer) {
//line views/auth.qtpl:75
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/auth.qtpl:75
	streamtelegramWidgetHTML(qw422016)
//line views/auth.qtpl:75
	qt422016.ReleaseWriter(qw422016)
//line views/auth.qtpl:75
}

//line views/auth.qtpl:75
func telegramWidgetHTML() string {
//line views/auth.qtpl:75
	qb422016 := qt422016.AcquireByteBuffer()
//line views/auth.qtpl:75
	writetelegramWidgetHTML(qb422016)
//line views/auth.qtpl:75
	qs422016 := string(qb422016.B)
//line views/auth.qtpl:75
	qt422016.ReleaseByteBuffer(qb422016)
//line views/auth.qtpl:75
	return qs422016
//line views/auth.qtpl:75
}

//line views/auth.qtpl:77
func StreamLoginErrorHTML(qw422016 *qt422016.Writer, err string) {
//line views/auth.qtpl:77
	qw422016.N().S(`
<div class="layout">
<main class="main-width">
	<section>
	`)
//line views/auth.qtpl:81
	switch err {
//line views/auth.qtpl:82
	case "unknown username":
//line views/auth.qtpl:82
		qw422016.N().S(`
		<p class="error">Unknown username.</p>
	`)
//line views/auth.qtpl:84
	case "wrong password":
//line views/auth.qtpl:84
		qw422016.N().S(`
		<p class="error">Wrong password.</p>
	`)
//line views/auth.qtpl:86
	default:
//line views/auth.qtpl:86
		qw422016.N().S(`
		<p class="error">`)
//line views/auth.qtpl:87
		qw422016.E().S(err)
//line views/auth.qtpl:87
		qw422016.N().S(`</p>
	`)
//line views/auth.qtpl:88
	}
//line views/auth.qtpl:88
	qw422016.N().S(`
		<p><a href="/login">← Try again</a></p>
	</section>
</main>
</div>
`)
//line views/auth.qtpl:93
}

//line views/auth.qtpl:93
func WriteLoginErrorHTML(qq422016 qtio422016.Writer, err string) {
//line views/auth.qtpl:93
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/auth.qtpl:93
	StreamLoginErrorHTML(qw422016, err)
//line views/auth.qtpl:93
	qt422016.ReleaseWriter(qw422016)
//line views/auth.qtpl:93
}

//line views/auth.qtpl:93
func LoginErrorHTML(err string) string {
//line views/auth.qtpl:93
	qb422016 := qt422016.AcquireByteBuffer()
//line views/auth.qtpl:93
	WriteLoginErrorHTML(qb422016, err)
//line views/auth.qtpl:93
	qs422016 := string(qb422016.B)
//line views/auth.qtpl:93
	qt422016.ReleaseByteBuffer(qb422016)
//line views/auth.qtpl:93
	return qs422016
//line views/auth.qtpl:93
}

//line views/auth.qtpl:95
func StreamLogoutHTML(qw422016 *qt422016.Writer, can bool) {
//line views/auth.qtpl:95
	qw422016.N().S(`
<div class="layout">
<main class="main-width">
	<section>
	`)
//line views/auth.qtpl:99
	if can {
//line views/auth.qtpl:99
		qw422016.N().S(`
		<h1>Log out?</h1>
		<p><a href="/logout-confirm"><strong>Confirm</strong></a></p>
		<p><a href="/">Cancel</a></p>
	`)
//line views/auth.qtpl:103
	} else {
//line views/auth.qtpl:103
		qw422016.N().S(`
		<p>You cannot log out because you are not logged in.</p>
		<p><a href="/login">Login</a></p>
		<p><a href="/login">← Home</a></p>
	`)
//line views/auth.qtpl:107
	}
//line views/auth.qtpl:107
	qw422016.N().S(`
	</section>
</main>
</div>
`)
//line views/auth.qtpl:111
}

//line views/auth.qtpl:111
func WriteLogoutHTML(qq422016 qtio422016.Writer, can bool) {
//line views/auth.qtpl:111
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/auth.qtpl:111
	StreamLogoutHTML(qw422016, can)
//line views/auth.qtpl:111
	qt422016.ReleaseWriter(qw422016)
//line views/auth.qtpl:111
}

//line views/auth.qtpl:111
func LogoutHTML(can bool) string {
//line views/auth.qtpl:111
	qb422016 := qt422016.AcquireByteBuffer()
//line views/auth.qtpl:111
	WriteLogoutHTML(qb422016, can)
//line views/auth.qtpl:111
	qs422016 := string(qb422016.B)
//line views/auth.qtpl:111
	qt422016.ReleaseByteBuffer(qb422016)
//line views/auth.qtpl:111
	return qs422016
//line views/auth.qtpl:111
}

//line views/auth.qtpl:113
func StreamLockHTML(qw422016 *qt422016.Writer) {
//line views/auth.qtpl:113
	qw422016.N().S(`
<!doctype html>
<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>🔒 Locked</title>
	<link rel="shortcut icon" href="/static/favicon.ico">
	<link rel="stylesheet" href="/static/style.css">
</head>
<body>
	<main class="locked-notice">
		<section class="locked-notice__message">
			<p class="locked-notice__lock">🔒</p>
			<h1 class="locked-notice__title">Locked</h1>
			<form class="locked-notice__login-form" method="post" action="/login-data" id="login-form" enctype="multipart/form-data" autocomplete="on">
				<label for="login-form__username">Username</label>
				<br>
				<input type="text" required autofocus id="login-form__username" name="username" autocomplete="username">
				<br>
				<label for="login-form__password">Password</label>
				<br>
				<input type="password" required name="password" autocomplete="current-password">
				<br>
				<input class="btn" type="submit" value="Log in">
			</form>
			`)
//line views/auth.qtpl:139
	streamtelegramWidgetHTML(qw422016)
//line views/auth.qtpl:139
	qw422016.N().S(`
		</section>
	</main>
</body>
</html>
`)
//line views/auth.qtpl:144
}

//line views/auth.qtpl:144
func WriteLockHTML(qq422016 qtio422016.Writer) {
//line views/auth.qtpl:144
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/auth.qtpl:144
	StreamLockHTML(qw422016)
//line views/auth.qtpl:144
	qt422016.ReleaseWriter(qw422016)
//line views/auth.qtpl:144
}

//line views/auth.qtpl:144
func LockHTML() string {
//line views/auth.qtpl:144
	qb422016 := qt422016.AcquireByteBuffer()
//line views/auth.qtpl:144
	WriteLockHTML(qb422016)
//line views/auth.qtpl:144
	qs422016 := string(qb422016.B)
//line views/auth.qtpl:144
	qt422016.ReleaseByteBuffer(qb422016)
//line views/auth.qtpl:144
	return qs422016
//line views/auth.qtpl:144
}
