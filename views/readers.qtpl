{% import "net/http" %}
{% import "strings" %}
{% import "path" %}
{% import "os" %}

{% import "github.com/bouncepaw/mycorrhiza/cfg" %}
{% import "github.com/bouncepaw/mycorrhiza/hyphae" %}
{% import "github.com/bouncepaw/mycorrhiza/mimetype" %}
{% import "github.com/bouncepaw/mycorrhiza/tree" %}
{% import "github.com/bouncepaw/mycorrhiza/user" %}
{% import "github.com/bouncepaw/mycorrhiza/util" %}

{% func AttachmentMenuHTML(rq *http.Request, h *hyphae.Hypha, u *user.User) %}
<div class="layout">
<main class="main-width attachment-tab">
	<h1>Attachment of {%s= beautifulLink(h.Name) %}</h1>
	{% if h.BinaryPath == "" %}
	<p class="explanation">This hypha has no attachment, you can upload it here. <a href="/help/en/attachment" class="shy-link">What are attachments?</a></p>
	{% else %}
	<p class="explanation">You can manage the hypha's attachment on this page. <a href="/help/en/attachment" class="shy-link">What are attachments?</a></p>
	{% endif %}

	<section class="amnt-grid">

	{% if h.BinaryPath != "" %}
		{% code
			mime := mimetype.FromExtension(path.Ext(h.BinaryPath))
			fileinfo, err := os.Stat(h.BinaryPath) %}
		{% if err == nil %}
		<fieldset class="amnt-menu-block">
			<legend class="modal__title modal__title_small">Stat</legend>
			<p class="modal__confirmation-msg"><b>File size:</b> {%dl fileinfo.Size() %} bytes</p>
			<p><b>MIME type:</b> {%s mime %}</p>
		</fieldset>
		{% endif %}

		{% if strings.HasPrefix(mime, "image/") %}
		<fieldset class="amnt-menu-block">
			<legend class="modal__title modal__title_small">Include</legend>
			<p class="modal__confirmation-msg">This attachment is an image. To include it n a hypha, use a syntax like this:</p>
			<pre class="codebleck"><code>img { {%s h.Name %} }</code></pre>
		</fieldset>
		{% endif %}
	{% endif %}

	{% if u.CanProceed("upload-binary") %}
	<form action="/upload-binary/{%s h.Name %}"
			method="post" enctype="multipart/form-data"
			class="upload-binary modal amnt-menu-block">
		<fieldset class="modal__fieldset">
			<legend class="modal__title modal__title_small">Attach</legend>
			<p class="modal__confirmation-msg">You can upload a new attachment. Please do not upload too big pictures unless you need to because may not want to wait for big pictures to load.</p>
			<label for="upload-binary__input"></label>
			<input type="file" id="upload-binary__input" name="binary">

			<input type="submit" class="btn stick-to-bottom" value="Upload">
		</fieldset>
	</form>
	{% endif %}

	{% if h.BinaryPath != "" && u.CanProceed("unattach-confirm") %}
	<form action="/unattach-confirm/{%s h.Name %}" method="post" class="modal amnt-menu-block">
		<fieldset class="modal__fieldset">
			<legend class="modal__title modal__title_small">Unattach</legend>
			<p class="modal__confirmation-msg">Please note that you don't have to unattach before uploading a new attachment.</p>
			<input type="submit" class="btn" value="Unattach">
		</fieldset>
	</form>
	{% endif %}

	</section>
</main>
</div>
{% endfunc %}

If `contents` == "", a helpful message is shown instead.
{% func HyphaHTML(rq *http.Request, h *hyphae.Hypha, contents string) %}
{% code
	siblings, subhyphae, prevHyphaName, nextHyphaName := tree.Tree(h.Name)
	u := user.FromRequest(rq)
%}
<div class="layout">
<main class="main-width">
	<article id="hypha">
		<div class="jump-btn">
			<a class="jump-btn__link" href="#hypha-bottom">↓</a>
		</div>
		{% if u.CanProceed("edit") %}<div class="btn edit-btn">
			<a class="edit-btn__link" href="/edit/{%s h.Name %}">Edit text</a>
		</div>{% endif %}
		{%s= NaviTitleHTML(h) %}
		{% if h.Exists %}
			{%s= contents %}
		{% else %}
		    {%= nonExistentHyphaNotice(h, u) %}
		{% endif %}
	</article>
	<section class="prevnext">
		{% if prevHyphaName != "" %}
		<a class="prevnext__el prevnext__prev" href="/hypha/{%s prevHyphaName %}" rel="prev">← {%s util.BeautifulName(path.Base(prevHyphaName)) %}</a>
		{% endif %}
		{% if nextHyphaName != "" %}
		<a class="prevnext__el prevnext__next" href="/hypha/{%s nextHyphaName %}" rel="next">{%s util.BeautifulName(path.Base(nextHyphaName)) %} →</a>
		{% endif %}
	</section>
{%= SubhyphaeHTML(subhyphae) %}
	<section id="hypha-bottom">
		<div class="jump-btn">
    		<a class="jump-btn__link" href="#hypha">↑</a>
   		</div>
   		{%= hyphaInfo(rq, h) %}
	</section>
</main>
{%= siblingHyphaeHTML(siblings) %}
</div>
{%= viewScripts() %}
{% endfunc %}

{% func RevisionHTML(rq *http.Request, h *hyphae.Hypha, contents, revHash string) %}
{% code
	siblings, subhyphae, _, _ := tree.Tree(h.Name)
%}
<div class="layout">
<main class="main-width">
	<article>
		<p>Please note that viewing attachments of hyphae is not supported in history for now.</p>
		{%s= NaviTitleHTML(h) %}
		{%s= contents %}
	</article>
{%= SubhyphaeHTML(subhyphae) %}
</main>
{%= siblingHyphaeHTML(siblings) %}
</div>
{%= viewScripts() %}
{% endfunc %}

{% func viewScripts() %}
{% for _, scriptPath := range cfg.ViewScripts %}
<script src="{%s scriptPath %}"></script>
{% endfor %}
{% endfunc %}